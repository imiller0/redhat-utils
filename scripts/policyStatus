#!/bin/bash

if [[ $# -lt 1 ]] ; then
    cat <<EOF

  Show compliance status of the policy with individual CR status
  displayed in a more readable format.

  Usage: $(basename $0) <namespace> <policyName>

EOF
    exit 1
fi

if [[ $# -lt 2 ]] ; then
    oc get policy -n $1 -o custom-columns=NAME:.metadata.name,'REMEDIATION ACTION':.spec.remediationAction,COMPLIANCE:.status.compliant,AGE:.metadata.creationTimestamp,WAVE:.metadata.annotations.'ran\.openshift\.io/ztp-deploy-wave' --sort-by .metadata.annotations.'ran\.openshift\.io/ztp-deploy-wave'
    exit 0
fi

if [[ 0 == 1 ]] ; then
policyJson=$(oc get policy -n $1 $2 -o json)
#templateErr=$(oc get policy -n $1 $2 -o jsonpath='{.spec.policy-templates[0].objectDefinition.metadata.annotations.policy\.open-cluster-management\.io/hub-templates-error}')
templateErr=$(echo "$policyJson" | jq '.spec.policy-templates[0].objectDefinition.metadata.annotations.\["policy.open-cluster-management.io/hub-templates-error"\]')
templateErrMsg=${templateErr##*template:}
if [[ "$templateErrMsg" != "" ]] ; then
    # Error in red
    echo -e "\033[0;31mTemplating error: ${templateErrMsg}\033[0;0m"
    exit 1
fi
fi

# Get the policy, extract the latest status message and then add newlines for each ';' and at the end
lines=$(oc get policy -n $1 $2 -o jsonpath='{.status.details[0].history[0].message}'  | sed -e 's/;/\n/g' -e '$a\')
#lines=$(echo "$policyJson" | jq '.status.details[0].history[0].message'  | sed -e 's/;/\n/g' -e '$a\')

echo "$lines" | while IFS= read -r line; do
    if [[ "$line" == *"violation"* ]] ; then
        # Display violation lines in red
        echo -e "\033[0;31m${line}\033[0;0m"
    else
        # Colorize the compliant messages in green
        sub=$(echo "$line" | sed 's/\(template is compliant\|^Compliant\)/\\033[0;32m\1\\033[0;0m/g')
        echo -e "$sub"
    fi
done
